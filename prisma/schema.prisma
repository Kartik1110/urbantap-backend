datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password           String
  name               String?
  role               Role
  country_code       String?
  w_number           String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  brokers            Broker[]
  googleId           String?       @unique
  googleAccessToken  String?
  googleRefreshToken String?
  appleId            String?       @unique
  appleAccessToken   String?
  appleRefreshToken  String?
  fcm_token          String?
  jobs               Job[]
  applications       Application[]
}

enum Role {
  BROKER
  HR
  SM
  OTHER
  ADMIN
}

model Broker {
  id                       String              @id @default(uuid())
  name                     String
  email                    String              @unique
  info                     String
  y_o_e                    Int
  languages                String[]
  is_certified             Boolean
  profile_pic              String
  country_code             String?
  w_number                 String
  ig_link                  String?
  linkedin_link            String?
  designation              String?
  company_id               String?
  user_id                  String?
  type                     BrokerType?
  company                  Company?            @relation(fields: [company_id], references: [id])
  listings                 Listing[]
  user                     User?               @relation(fields: [user_id], references: [id])
  notifications            Notification[]
  sentByConnectionRequests ConnectionRequest[] @relation("SentBy")
  sentToConnectionRequests ConnectionRequest[] @relation("SentTo")
  sentByInquiries          Inquiry[]           @relation("InquirySentBy")
  sentToInquiries          Inquiry[]           @relation("InquirySentTo")
  broker1Connections       Connections[]       @relation("Broker1")
  broker2Connections       Connections[]       @relation("Broker2")
  reportedListings         ReportedListing[]
  Brokerage                Brokerage?          @relation(fields: [brokerageId], references: [id])
  brokerageId              String?
  Developer                Developer?          @relation(fields: [developerId], references: [id])
  developerId              String?
}

enum BrokerType {
  Off_plan
  Ready_to_move
  Both
}

model Company {
  id          String      @id @default(uuid())
  name        String      @default("")
  name_ar     String?
  description String      @default("")
  logo        String      @default("")
  type        CompanyType @default(Other)
  website     String?     @default("")
  email       String?     @default("")
  phone       String?     @default("")
  address     String?     @default("")
  brokers     Broker[]
  jobs        Job[]
  Brokerage   Brokerage[]
}

enum CompanyType {
  Developer
  Brokerage
  Other
}

model Listing {
  id                    String            @id @default(uuid())
  title                 String
  description           String
  image                 String
  min_price             Float?            @default(0)
  max_price             Float?            @default(0)
  sq_ft                 Float?
  type                  Type
  category              Category
  looking_for           Boolean // looking for or renting
  rental_frequency      Rental_frequency?
  no_of_bedrooms        Bedrooms?
  no_of_bathrooms       Bathrooms?
  furnished             Furnished?
  cheques               Int?
  city                  City
  address               String?           @default("")
  handover_year         Int? // e.g., 2025
  handover_quarter      Quarter?
  type_of_use           Type_of_use?
  deal_type             DealType?
  current_status        CurrentStatus?
  views                 Views?
  market                Market?
  parking_space         Boolean?
  service_charge        Int?
  construction_progress Int?
  gfa_bua               Int?
  floor_area_ratio      Float?
  latitude              Float?
  longitude             Float?
  amenities             String[]
  image_urls            String[]
  project_age           Int?
  payment_plan          Payment_Plan?
  sale_type             Sale_Type?
  broker_id             String
  created_at            DateTime          @default(now())
  broker                Broker            @relation(fields: [broker_id], references: [id])
  inquiries             Inquiry[]
  admin_status          Admin_Status?     @default(Pending)
  reported_listings     ReportedListing[]
  notifications         Notification[]    @relation("ListingNotifications")
}

enum Type_of_use {
  Commercial
  Residential
  Mixed
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}

enum DealType {
  Rental
  Selling
}

enum CurrentStatus {
  Occupied
  Vacant
}

enum Views {
  Classic
  City
  Community
  Water
  Sea
  Canal
  Park
  Lagoon
  Golf_Course
  Others
}

enum Market {
  Primary
  Secondary
}

model Developer {
  id          String    @id @default(uuid())
  name        String
  logo        String
  cover_image String?
  description String
  email       String?
  phone       String?
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Broker      Broker[]
}

model Project {
  id              String       @id @default(uuid())
  title           String
  description     String
  image           String
  images          String[] // gallery images
  floor_plans     String[] // floor plan images
  price           Float
  address         String
  city            City
  file_url        String? // optional downloadable file
  type            Category
  project_name    String
  project_age     String
  no_of_bedrooms  Bedrooms
  no_of_bathrooms Bathrooms
  furnished       Furnished
  property_size   Float
  payment_plan    Payment_Plan
  unit_types      String[] // dynamic list like: [“1BHK”, “2BHK Villa”, etc.]
  amenities       String[]
  developer_id    String
  developer       Developer    @relation(fields: [developer_id], references: [id])
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model Brokerage {
  id            String   @id @default(uuid())
  name          String
  logo          String
  description   String
  ded           String?
  rera          String?
  contact_email String?
  contact_phone String?
  service_areas String[]
  brokers       Broker[]
  company_id    String
  company       Company  @relation(fields: [company_id], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

enum Admin_Status {
  Approved
  Rejected
  Pending
  Reported
}

enum Category {
  Ready_to_move
  Off_plan
  Rent
}

enum Type {
  Apartment
  Villa
  Townhouse
  Office
  Shop
  Plot
  Retail
  Warehouse
}

enum Rental_frequency {
  Monthly
  Quarterly
  Yearly
  Lease
}

enum Furnished {
  Furnished
  Semi_furnished
  Unfurnished
  Kitchen_Appliances_only
}

enum City {
  Dubai
  Abu_Dhabi
  Sharjah
  Ajman
  Ras_Al_Khaimah
  Fujairah
  Umm_Al_Quwain
}

enum Bedrooms {
  Studio
  One
  Two
  Three
  Four_Plus
}

enum Bathrooms {
  One
  Two
  Three_Plus
}

enum Payment_Plan {
  Payment_done
  Payment_Pending
}

enum Sale_Type {
  Direct
  Resale
}

model ReportedListing {
  id             String   @id @default(uuid())
  listing_id     String
  listing        Listing  @relation(fields: [listing_id], references: [id])
  reported_by_id String
  reported_by    Broker   @relation(fields: [reported_by_id], references: [id])
  reason         String
  description    String
  created_at     DateTime @default(now())
}

model Notification {
  id                   String             @id @default(uuid())
  broker_id            String
  broker               Broker             @relation(fields: [broker_id], references: [id])
  sent_by_id           String
  timestamp            DateTime           @default(now())
  text                 String
  message              String?
  type                 NotificationType
  inquiry_id           String?
  inquiry              Inquiry?           @relation(fields: [inquiry_id], references: [id], name: "InquiryNotifications")
  connectionRequest_id String?
  connectionRequest    ConnectionRequest? @relation(fields: [connectionRequest_id], references: [id], name: "ConnectionRequestNotifications")
  listing_id           String?
  listing              Listing?           @relation(fields: [listing_id], references: [id], name: "ListingNotifications")
}

enum NotificationType {
  General
  Inquiries
  Network
  Broadcast
}

model ConnectionRequest {
  id            String         @id @default(uuid())
  sent_by_id    String
  sent_to_id    String
  sent_by       Broker         @relation("SentBy", fields: [sent_by_id], references: [id])
  sent_to       Broker         @relation("SentTo", fields: [sent_to_id], references: [id])
  timestamp     DateTime       @default(now())
  status        RequestStatus
  text          String?
  notifications Notification[] @relation("ConnectionRequestNotifications")
}

enum RequestStatus {
  Accepted
  Rejected
  Pending
  Blocked
}

model Connections {
  id         String   @id @default(uuid())
  broker1_id String
  broker2_id String
  broker1    Broker   @relation("Broker1", fields: [broker1_id], references: [id])
  broker2    Broker   @relation("Broker2", fields: [broker2_id], references: [id])
  timestamp  DateTime @default(now())
}

model Inquiry {
  id            String         @id @default(uuid())
  sent_by_id    String
  sent_to_id    String
  sent_by       Broker         @relation("InquirySentBy", fields: [sent_by_id], references: [id])
  sent_to       Broker         @relation("InquirySentTo", fields: [sent_to_id], references: [id])
  timestamp     DateTime       @default(now())
  listing_id    String
  country_code  String
  listing       Listing        @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  text          String
  email         String
  name          String
  phone_no      String
  notifications Notification[] @relation("InquiryNotifications")
}

model Job {
  id             String        @id @default(uuid())
  title          String
  company_id     String
  company        Company       @relation(fields: [company_id], references: [id])
  workplace_type WorkplaceType
  location       String
  job_type       JobType
  description    String
  min_salary     Float?
  max_salary     Float?
  currency       Currency
  min_experience Int?
  max_experience Int?
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id])
  applications   Application[]
}

enum Currency {
  USD
  AED
  INR
}

enum WorkplaceType {
  On_site
  Remote
  Hybrid
}

enum JobType {
  Full_time
  Part_time
  Internship
  Contract
}

model Application {
  id        String            @id @default(uuid())
  resume    String // File path or URL to the uploaded CV
  jobId     String
  userId    String
  status    ApplicationStatus @default(Under_Review)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  job       Job               @relation(fields: [jobId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  Under_Review
  Accepted
  Rejected
}
