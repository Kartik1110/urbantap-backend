datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String
  name               String?
  role               Role
  country_code       String?
  w_number           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  brokers            Broker[]
  googleId           String?  @unique
  googleAccessToken  String?
  googleRefreshToken String?
  appleId            String?  @unique
  appleAccessToken   String?
  appleRefreshToken  String?
}

enum Role {
  BROKER
  HR
  SM
  OTHER
  ADMIN
}

model Broker {
  id                       String              @id @default(uuid())
  name                     String
  email                    String              @unique
  info                     String
  y_o_e                    Int
  languages                String[]
  is_certified             Boolean
  profile_pic              String
  country_code             String?
  w_number                 String
  ig_link                  String?
  linkedin_link            String?
  designation              String?
  company_id               String?
  user_id                  String?
  company                  Company?            @relation(fields: [company_id], references: [id])
  listings                 Listing[]
  user                     User?               @relation(fields: [user_id], references: [id])
  notifications            Notification[]
  sentByConnectionRequests ConnectionRequest[] @relation("SentBy")
  sentToConnectionRequests ConnectionRequest[] @relation("SentTo")
  sentByInquiries          Inquiry[]           @relation("InquirySentBy")
  sentToInquiries          Inquiry[]           @relation("InquirySentTo")
  broker1Connections       Connections[]       @relation("Broker1")
  broker2Connections       Connections[]       @relation("Broker2")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  description String   @default("")
  logo        String   @default("")
  brokers     Broker[]
}

model Listing {
  id               String            @id @default(uuid())
  title            String
  description      String
  image            String
  min_price        Float?            @default(0)
  max_price        Float?            @default(0)
  sq_ft            Float?
  type             Type
  category         Category
  looking_for      Boolean // looking for or renting
  rental_frequency Rental_frequency?
  no_of_bedrooms   Bedrooms?
  no_of_bathrooms  Bathrooms?
  furnished        Furnished?
  city             City
  address          String?           @default("")
  amenities        String[]
  image_urls       String[]
  project_age      Int?
  payment_plan     Payment_Plan?
  sale_type        Sale_Type?
  broker_id        String
  created_at       DateTime          @default(now())
  broker           Broker            @relation(fields: [broker_id], references: [id])
  inquiries        Inquiry[]
}

enum Category {
  Ready_to_move
  Off_plan
  Rent
}

enum Type {
  Apartment
  Villa
  Townhouse
  Office
}

enum Rental_frequency {
  Monthly
  Quarterly
  Yearly
  Lease
}

enum Furnished {
  Furnished
  Semi_furnished
  Unfurnished
}

enum City {
  Dubai
  Abu_Dhabi
  Sharjah
  Ajman
  Ras_Al_Khaimah
  Fujairah
  Umm_Al_Quwain
}

enum Bedrooms {
  Studio
  One
  Two
  Three
  Four_Plus
}

enum Bathrooms {
  One
  Two
  Three_Plus
}

enum Payment_Plan {
  Payment_done
  Payment_Pending
}

enum Sale_Type {
  Direct
  Resale
}

model Notification {
  id                   String             @id @default(uuid())
  broker_id            String
  broker               Broker             @relation(fields: [broker_id], references: [id])
  sent_by_id           String
  timestamp            DateTime           @default(now())
  text                 String
  message              String?
  type                 NotificationType
  inquiry_id           String?
  inquiry              Inquiry?           @relation(fields: [inquiry_id], references: [id], name: "InquiryNotifications")
  connectionRequest_id String?
  connectionRequest    ConnectionRequest? @relation(fields: [connectionRequest_id], references: [id], name: "ConnectionRequestNotifications")
}

enum NotificationType {
  General
  Inquiries
  Network
}

model ConnectionRequest {
  id            String         @id @default(uuid())
  sent_by_id    String
  sent_to_id    String
  sent_by       Broker         @relation("SentBy", fields: [sent_by_id], references: [id])
  sent_to       Broker         @relation("SentTo", fields: [sent_to_id], references: [id])
  timestamp     DateTime       @default(now())
  status        RequestStatus
  text          String?
  notifications Notification[] @relation("ConnectionRequestNotifications")
}

enum RequestStatus {
  Accepted
  Rejected
  Pending
}

model Connections {
  id         String   @id @default(uuid())
  broker1_id String
  broker2_id String
  broker1    Broker   @relation("Broker1", fields: [broker1_id], references: [id])
  broker2    Broker   @relation("Broker2", fields: [broker2_id], references: [id])
  timestamp  DateTime @default(now())
}

model Inquiry {
  id            String         @id @default(uuid())
  sent_by_id    String
  sent_to_id    String
  sent_by       Broker         @relation("InquirySentBy", fields: [sent_by_id], references: [id])
  sent_to       Broker         @relation("InquirySentTo", fields: [sent_to_id], references: [id])
  timestamp     DateTime       @default(now())
  listing_id    String
  country_code  String
  listing       Listing        @relation(fields: [listing_id], references: [id] ,onDelete: Cascade)
  text          String
  email         String // New field
  name          String // New field
  phone_no      String // New field
  notifications Notification[] @relation("InquiryNotifications")
}
